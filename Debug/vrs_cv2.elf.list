
vrs_cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000088c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009c8  080009d0  000109d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009c8  080009c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009cc  080009cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000109d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080009d0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080009d0  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000109d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001419  00000000  00000000  000109f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004e7  00000000  00000000  00011e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000230  00000000  00000000  00012300  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00012530  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000b6f  00000000  00000000  00012718  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000092b  00000000  00000000  00013287  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00013bb2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000080c  00000000  00000000  00013c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001443c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	080009b0 	.word	0x080009b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	080009b0 	.word	0x080009b0

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	bf14      	ite	ne
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e720      	b.n	80002c0 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aedc 	beq.w	800026e <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6c1      	b.n	800026e <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__gedf2>:
 80004ec:	f04f 3cff 	mov.w	ip, #4294967295
 80004f0:	e006      	b.n	8000500 <__cmpdf2+0x4>
 80004f2:	bf00      	nop

080004f4 <__ledf2>:
 80004f4:	f04f 0c01 	mov.w	ip, #1
 80004f8:	e002      	b.n	8000500 <__cmpdf2+0x4>
 80004fa:	bf00      	nop

080004fc <__cmpdf2>:
 80004fc:	f04f 0c01 	mov.w	ip, #1
 8000500:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000504:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800050c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000510:	bf18      	it	ne
 8000512:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000516:	d01b      	beq.n	8000550 <__cmpdf2+0x54>
 8000518:	b001      	add	sp, #4
 800051a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800051e:	bf0c      	ite	eq
 8000520:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000524:	ea91 0f03 	teqne	r1, r3
 8000528:	bf02      	ittt	eq
 800052a:	ea90 0f02 	teqeq	r0, r2
 800052e:	2000      	moveq	r0, #0
 8000530:	4770      	bxeq	lr
 8000532:	f110 0f00 	cmn.w	r0, #0
 8000536:	ea91 0f03 	teq	r1, r3
 800053a:	bf58      	it	pl
 800053c:	4299      	cmppl	r1, r3
 800053e:	bf08      	it	eq
 8000540:	4290      	cmpeq	r0, r2
 8000542:	bf2c      	ite	cs
 8000544:	17d8      	asrcs	r0, r3, #31
 8000546:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800054a:	f040 0001 	orr.w	r0, r0, #1
 800054e:	4770      	bx	lr
 8000550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000558:	d102      	bne.n	8000560 <__cmpdf2+0x64>
 800055a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800055e:	d107      	bne.n	8000570 <__cmpdf2+0x74>
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000568:	d1d6      	bne.n	8000518 <__cmpdf2+0x1c>
 800056a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800056e:	d0d3      	beq.n	8000518 <__cmpdf2+0x1c>
 8000570:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__aeabi_cdrcmple>:
 8000578:	4684      	mov	ip, r0
 800057a:	4610      	mov	r0, r2
 800057c:	4662      	mov	r2, ip
 800057e:	468c      	mov	ip, r1
 8000580:	4619      	mov	r1, r3
 8000582:	4663      	mov	r3, ip
 8000584:	e000      	b.n	8000588 <__aeabi_cdcmpeq>
 8000586:	bf00      	nop

08000588 <__aeabi_cdcmpeq>:
 8000588:	b501      	push	{r0, lr}
 800058a:	f7ff ffb7 	bl	80004fc <__cmpdf2>
 800058e:	2800      	cmp	r0, #0
 8000590:	bf48      	it	mi
 8000592:	f110 0f00 	cmnmi.w	r0, #0
 8000596:	bd01      	pop	{r0, pc}

08000598 <__aeabi_dcmpeq>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff fff4 	bl	8000588 <__aeabi_cdcmpeq>
 80005a0:	bf0c      	ite	eq
 80005a2:	2001      	moveq	r0, #1
 80005a4:	2000      	movne	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmplt>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffea 	bl	8000588 <__aeabi_cdcmpeq>
 80005b4:	bf34      	ite	cc
 80005b6:	2001      	movcc	r0, #1
 80005b8:	2000      	movcs	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmple>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffe0 	bl	8000588 <__aeabi_cdcmpeq>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpge>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffce 	bl	8000578 <__aeabi_cdrcmple>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpgt>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffc4 	bl	8000578 <__aeabi_cdrcmple>
 80005f0:	bf34      	ite	cc
 80005f2:	2001      	movcc	r0, #1
 80005f4:	2000      	movcs	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800060e:	4909      	ldr	r1, [pc, #36]	; (8000634 <RCC_AHBPeriphClockCmd+0x38>)
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <RCC_AHBPeriphClockCmd+0x38>)
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800061a:	e006      	b.n	800062a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800061c:	4905      	ldr	r1, [pc, #20]	; (8000634 <RCC_AHBPeriphClockCmd+0x38>)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_AHBPeriphClockCmd+0x38>)
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	43db      	mvns	r3, r3
 8000626:	4013      	ands	r3, r2
 8000628:	61cb      	str	r3, [r1, #28]
  }
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40023800 	.word	0x40023800

08000638 <main>:
**===========================================================================
*/


int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
	int BUTTON;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800063e:	2101      	movs	r1, #1
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff ffdb 	bl	80005fc <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000646:	2101      	movs	r1, #1
 8000648:	2004      	movs	r0, #4
 800064a:	f7ff ffd7 	bl	80005fc <RCC_AHBPeriphClockCmd>

    GPIOA->MODER |= (0b01) << (5*2);
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <main+0xe8>)
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <main+0xe8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000658:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((uint16_t)(1<<5));
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <main+0xe8>)
 800065c:	4b30      	ldr	r3, [pc, #192]	; (8000720 <main+0xe8>)
 800065e:	889b      	ldrh	r3, [r3, #4]
 8000660:	b29b      	uxth	r3, r3
 8000662:	f023 0320 	bic.w	r3, r3, #32
 8000666:	b29b      	uxth	r3, r3
 8000668:	8093      	strh	r3, [r2, #4]
    GPIOA->PUPDR |= (0b01) << (5*2);
 800066a:	4a2d      	ldr	r2, [pc, #180]	; (8000720 <main+0xe8>)
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <main+0xe8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000674:	60d3      	str	r3, [r2, #12]
    GPIOA->OSPEEDR |= (0b11) << (5*2);
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <main+0xe8>)
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <main+0xe8>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000680:	6093      	str	r3, [r2, #8]
    GPIOC->MODER |= (0b00) << (13*2);
 8000682:	4a28      	ldr	r2, [pc, #160]	; (8000724 <main+0xec>)
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <main+0xec>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER &= ~((uint16_t)(1<<13));
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <main+0xec>)
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <main+0xec>)
 800068e:	889b      	ldrh	r3, [r3, #4]
 8000690:	b29b      	uxth	r3, r3
 8000692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000696:	b29b      	uxth	r3, r3
 8000698:	8093      	strh	r3, [r2, #4]
    GPIOC->PUPDR |= (0b00) << (13*2);
 800069a:	4a22      	ldr	r2, [pc, #136]	; (8000724 <main+0xec>)
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <main+0xec>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60d3      	str	r3, [r2, #12]
        	 else if ((GPIOC->IDR & (0b0010000000000000)) == (pow(2,13)))
        		 GPIOA->ODR &= ~(0b0000000000100000); //LEDka nesvieti
          }
*/
///////////////// Uloha 3, tretia cast //////////////////////////////////
    int i, j = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
    while(1){
    	 for (i = 0;i<=5;i++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	e011      	b.n	80006d0 <main+0x98>
    		 if ((GPIOC->IDR & (0b0010000000000000)) == 0){
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <main+0xec>)
 80006ae:	8a1b      	ldrh	r3, [r3, #16]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d107      	bne.n	80006ca <main+0x92>
    			 i++;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	3301      	adds	r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
    	 	  	 if (i>3){
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	dd01      	ble.n	80006ca <main+0x92>
    	 	  		 BUTTON = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
          }
*/
///////////////// Uloha 3, tretia cast //////////////////////////////////
    int i, j = 0;
    while(1){
    	 for (i = 0;i<=5;i++){
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	ddea      	ble.n	80006ac <main+0x74>
    	 	  	 if (i>3){
    	 	  		 BUTTON = 1;
    	 	  	 }
    	 	 }
    	 }
    	 if (BUTTON == 1){
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d1e4      	bne.n	80006a6 <main+0x6e>
    		 if ((GPIOC->IDR & (0b0010000000000000)) == (pow(2,13))){
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <main+0xec>)
 80006de:	8a1b      	ldrh	r3, [r3, #16]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe9a 	bl	8000420 <__aeabi_i2d>
 80006ec:	f04f 0200 	mov.w	r2, #0
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <main+0xf0>)
 80006f2:	f7ff ff51 	bl	8000598 <__aeabi_dcmpeq>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00f      	beq.n	800071c <main+0xe4>
    			 j++;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
    			 if (j>5){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b05      	cmp	r3, #5
 8000706:	ddce      	ble.n	80006a6 <main+0x6e>
    				 GPIOA->ODR ^= (1<<5);
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <main+0xe8>)
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <main+0xe8>)
 800070c:	8a9b      	ldrh	r3, [r3, #20]
 800070e:	b29b      	uxth	r3, r3
 8000710:	f083 0320 	eor.w	r3, r3, #32
 8000714:	b29b      	uxth	r3, r3
 8000716:	8293      	strh	r3, [r2, #20]
    				 BUTTON = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
    			 }
    		 }
    	 }
    }
 800071c:	e7c3      	b.n	80006a6 <main+0x6e>
 800071e:	bf00      	nop
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40c00000 	.word	0x40c00000

0800072c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000730:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000732:	e003      	b.n	800073c <LoopCopyDataInit>

08000734 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000736:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000738:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800073a:	3104      	adds	r1, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000740:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000742:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000744:	d3f6      	bcc.n	8000734 <CopyDataInit>
  ldr r2, =_sbss
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000748:	e002      	b.n	8000750 <LoopFillZerobss>

0800074a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800074c:	f842 3b04 	str.w	r3, [r2], #4

08000750 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000752:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000754:	d3f9      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000756:	f000 f841 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f000 f903 	bl	8000964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff ff6b 	bl	8000638 <main>
  bx lr
 8000762:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000768:	080009d0 	.word	0x080009d0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000770:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000774:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000778:	2000001c 	.word	0x2000001c

0800077c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_IRQHandler>
	...

08000780 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000790:	e7fe      	b.n	8000790 <HardFault_Handler+0x4>
 8000792:	bf00      	nop

08000794 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>
 800079a:	bf00      	nop

0800079c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80007a0:	e7fe      	b.n	80007a0 <BusFault_Handler+0x4>
 80007a2:	bf00      	nop

080007a4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>
 80007aa:	bf00      	nop

080007ac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */

void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80007e0:	4a15      	ldr	r2, [pc, #84]	; (8000838 <SystemInit+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <SystemInit+0x5c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ea:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80007ec:	4912      	ldr	r1, [pc, #72]	; (8000838 <SystemInit+0x5c>)
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <SystemInit+0x5c>)
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <SystemInit+0x60>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <SystemInit+0x5c>)
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <SystemInit+0x5c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000802:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000806:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000808:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <SystemInit+0x5c>)
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <SystemInit+0x5c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000812:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <SystemInit+0x5c>)
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <SystemInit+0x5c>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800081e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SystemInit+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000826:	f000 f80d 	bl	8000844 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SystemInit+0x64>)
 800082c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000830:	609a      	str	r2, [r3, #8]
#endif
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	88ffc00c 	.word	0x88ffc00c
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000852:	4a41      	ldr	r2, [pc, #260]	; (8000958 <SetSysClock+0x114>)
 8000854:	4b40      	ldr	r3, [pc, #256]	; (8000958 <SetSysClock+0x114>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <SetSysClock+0x114>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d103      	bne.n	800087c <SetSysClock+0x38>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800087a:	d1f0      	bne.n	800085e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <SetSysClock+0x114>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000888:	2301      	movs	r3, #1
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	e001      	b.n	8000892 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d15a      	bne.n	800094e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000898:	4a30      	ldr	r2, [pc, #192]	; (800095c <SetSysClock+0x118>)
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <SetSysClock+0x118>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80008a4:	4a2d      	ldr	r2, [pc, #180]	; (800095c <SetSysClock+0x118>)
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <SetSysClock+0x118>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80008b0:	4a2a      	ldr	r2, [pc, #168]	; (800095c <SetSysClock+0x118>)
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <SetSysClock+0x118>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008bc:	4a26      	ldr	r2, [pc, #152]	; (8000958 <SetSysClock+0x114>)
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <SetSysClock+0x114>)
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <SetSysClock+0x11c>)
 80008ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ce:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80008d0:	bf00      	nop
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <SetSysClock+0x11c>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <SetSysClock+0x114>)
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <SetSysClock+0x114>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <SetSysClock+0x114>)
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <SetSysClock+0x114>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <SetSysClock+0x114>)
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <SetSysClock+0x114>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <SetSysClock+0x114>)
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <SetSysClock+0x114>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000900:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <SetSysClock+0x114>)
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <SetSysClock+0x114>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 800090c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <SetSysClock+0x114>)
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <SetSysClock+0x114>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000918:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800091a:	bf00      	nop
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <SetSysClock+0x114>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f9      	beq.n	800091c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <SetSysClock+0x114>)
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <SetSysClock+0x114>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f023 0303 	bic.w	r3, r3, #3
 8000932:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <SetSysClock+0x114>)
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <SetSysClock+0x114>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f043 0303 	orr.w	r3, r3, #3
 800093e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000940:	bf00      	nop
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SetSysClock+0x114>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 030c 	and.w	r3, r3, #12
 800094a:	2b0c      	cmp	r3, #12
 800094c:	d1f9      	bne.n	8000942 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40023800 	.word	0x40023800
 800095c:	40023c00 	.word	0x40023c00
 8000960:	40007000 	.word	0x40007000

08000964 <__libc_init_array>:
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <__libc_init_array+0x3c>)
 8000966:	b570      	push	{r4, r5, r6, lr}
 8000968:	461e      	mov	r6, r3
 800096a:	4c0e      	ldr	r4, [pc, #56]	; (80009a4 <__libc_init_array+0x40>)
 800096c:	2500      	movs	r5, #0
 800096e:	1ae4      	subs	r4, r4, r3
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	42a5      	cmp	r5, r4
 8000974:	d004      	beq.n	8000980 <__libc_init_array+0x1c>
 8000976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800097a:	4798      	blx	r3
 800097c:	3501      	adds	r5, #1
 800097e:	e7f8      	b.n	8000972 <__libc_init_array+0xe>
 8000980:	f000 f816 	bl	80009b0 <_init>
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <__libc_init_array+0x44>)
 8000986:	4c09      	ldr	r4, [pc, #36]	; (80009ac <__libc_init_array+0x48>)
 8000988:	461e      	mov	r6, r3
 800098a:	1ae4      	subs	r4, r4, r3
 800098c:	10a4      	asrs	r4, r4, #2
 800098e:	2500      	movs	r5, #0
 8000990:	42a5      	cmp	r5, r4
 8000992:	d004      	beq.n	800099e <__libc_init_array+0x3a>
 8000994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000998:	4798      	blx	r3
 800099a:	3501      	adds	r5, #1
 800099c:	e7f8      	b.n	8000990 <__libc_init_array+0x2c>
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	080009c8 	.word	0x080009c8
 80009a4:	080009c8 	.word	0x080009c8
 80009a8:	080009c8 	.word	0x080009c8
 80009ac:	080009cc 	.word	0x080009cc

080009b0 <_init>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr

080009bc <_fini>:
 80009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009be:	bf00      	nop
 80009c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c2:	bc08      	pop	{r3}
 80009c4:	469e      	mov	lr, r3
 80009c6:	4770      	bx	lr
